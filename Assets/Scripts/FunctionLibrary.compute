//Unity’ye compute shader’ını kullanırken hangi fonksiyonların "kernel" olduğunu söylemen gerek. Dispatch() sadece #pragma kernel ile bildirilen fonksiyonları çalıştırabilir.
//Eğer yazmazsam Unity compile eder ama Dispatch() fonksiyonunu çağırınca " kernel index out of range " hatası alıyorum.
#pragma kernel WaveKernel
#pragma kernel WaveToMultiWaveKernel
#pragma kernel WaveToRippleKernel
#pragma kernel WaveToSphereKernel
#pragma kernel WaveToTorusKernel

#pragma kernel MultiWaveToWaveKernel
#pragma kernel MultiWaveKernel
#pragma kernel MultiWaveToRippleKernel
#pragma kernel MultiWaveToSphereKernel
#pragma kernel MultiWaveToTorusKernel

#pragma kernel RippleToWaveKernel
#pragma kernel RippleToMultiWaveKernel
#pragma kernel RippleKernel
#pragma kernel RippleToSphereKernel
#pragma kernel RippleToTorusKernel

#pragma kernel SphereToWaveKernel
#pragma kernel SphereToMultiWaveKernel
#pragma kernel SphereToRippleKernel
#pragma kernel SphereKernel
#pragma kernel SphereToTorusKernel

#pragma kernel TorusToWaveKernel
#pragma kernel TorusToMultiWaveKernel
#pragma kernel TorusToRippleKernel
#pragma kernel TorusToSphereKernel
#pragma kernel TorusKernel




RWStructuredBuffer<float3> _Positions;

uint _Resolution;

float _Step, _Time, _TransitionProgress;

float2 GetUV (uint3 id) {
	return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition (uint3 id, float3 position)
{
    if(id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[id.x + id.y *_Resolution] = position;
    }
}

#define PI 3.14159265358979323846           //PI kendimiz belirliyoruz float daha tutarlı olması için
                                            //#define derleme aşamasında doğrudan metin yerine koyma yapar, yani sayı doğrudan kodun içine gömülür.
                                            //Böylece herhangi bir değişken ya da veri tipi ataması olmadan, sayı doğrudan sabit olarak kullanılır.
                                            //float türü ise hafızada yer kaplar ve işlem sırasında değişken gibi davranır.


float3 Wave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + v + t));
    p.z = v;
    return p;
}

/*
    float d = sqrt(u * u + v * v);
    float3 p;
    p.x = u * 8;
    p.z = v * 2;
	p.y = sin(PI * (u + t));
    p.y *= 1 / 2.5;
	return p; 
*/

float3 MultiWave (float u, float v, float t) {
	float3 p;
	p.x = u;
	p.y = sin(PI * (u + 0.5 * t));
	p.y += 0.5 * sin(2.0 * PI * (v + t));
	p.y += sin(PI * (u + v + 0.25 * t));
	p.y *= 1.0 / 2.5;
	p.z = v;
	return p;
}

float3 Ripple (float u, float v, float t) {
	float d = sqrt(u * u + v * v);
	float3 p;
	p.x = u;
	p.y = sin(PI * (4.0 * d - t));
	p.y /= 1.0 + 10.0 * d;
	p.z = v;
	return p;
}

float3 Sphere (float u, float v, float t) {
	float r = 0.9 + 0.1 * sin(PI * (12.0 * u + 8.0 * v + t)); // detay için 12 ve 8 ile oyna normalde 6 ve 4 dü
	float s = r * cos(0.5 * PI * v);
	float3 p;
	p.x = s * sin(PI * u);
	p.y = r * sin(0.5 * PI * v);
	p.z = s * cos(PI * u);
	return p;
}

float3 Torus (float u, float v, float t) {
	float r1 = 0.7 + 0.1 * sin(PI * (8.0 * u + 0.5 * t));				// detay için 6 dan 8 e
	float r2 = 0.15 + 0.05 * sin(PI * (16.0 * u + 8.0 * v + 3.0 * t));  // detay için 8 den 16 4 den 8 ve son olarak bükülme ana desen göre daha yavaş olmasın diye zaman çarpanı 2 den 3 e
	float s = r2 * cos(PI * v) + r1;
	float3 p;
	p.x = s * sin(PI * u);
	p.y = r2 * sin(PI * v);
	p.z = s * cos(PI * u);
	return p;
}

//Açıklama:
//Makrolar, derleyici tarafından kodun yerini doldurmak için string gibi işlenir, O yüzden kuralları çok hassastır. Daha önce PI için kullanmıştım.
//#define sadece satır sonuna kadar geçerli,
//Eğer satırın sonunda \ koymazsan sadece bir satır tanımlanır. Bu yüzden çok satırlı makro tanımı yaparken her satırın sonuna "\" koymayı unutma.
#define KERNEL_FUNCTION(function) \			//C/C++ ve HLSL'de Makro ismine parametre parantezleri bitişik yazılmalı
	[numthreads(8, 8, 1)] \
	void function##Kernel (uint3 id: SV_DispatchThreadID) { \  //## işareti, iki kelimeyi birleştiren özel bir operatördür ve sadece makro içinde çalışır.
		float2 uv = GetUV(id); \								//Bu sayede bir makroya farklı isimler türetebiliriz. örnek function##Kernel -->WaveKernel şeklinde veya RippleKernel gibi,
		SetPosition(id, function(uv.x, uv.y, _Time)); \			//burada yaptığımız şey 3 satır yukarıdaki function tanımı ile diğer tüm functionları tanımlayabilmek 
	}


//Compute shader dosyanda birden fazla kernel fonksiyonu tanımlamak istiyorsan, her birinin ismi farklı olmalı.
//yukarıda anlattığım gibi ## sistemi ile macro otamatik olarak doldurur
//Her satır bir kernel üretir
//ayrıca Unity'nin bu kernel'ları tanıması için en üstte pragmaları yazıyoruz
KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiWave)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Sphere)
KERNEL_FUNCTION(Torus)



#define KERNEL_MORPH_FUNCTION(functionA, functionB) \
	[numthreads(8, 8, 1)] \
	void functionA##To##functionB##Kernel (uint3 id: SV_DispatchThreadID) { \
		float2 uv = GetUV(id); \
		float3 position = lerp( \
			functionA(uv.x, uv.y, _Time), functionB(uv.x, uv.y, _Time), \
			_TransitionProgress \
		); \
		SetPosition(id, position); \
	}

KERNEL_MORPH_FUNCTION(Wave, MultiWave);
KERNEL_MORPH_FUNCTION(Wave, Ripple);
KERNEL_MORPH_FUNCTION(Wave, Sphere);
KERNEL_MORPH_FUNCTION(Wave, Torus);

KERNEL_MORPH_FUNCTION(MultiWave, Wave);
KERNEL_MORPH_FUNCTION(MultiWave, Ripple);
KERNEL_MORPH_FUNCTION(MultiWave, Sphere);
KERNEL_MORPH_FUNCTION(MultiWave, Torus);

KERNEL_MORPH_FUNCTION(Ripple, Wave);
KERNEL_MORPH_FUNCTION(Ripple, MultiWave);
KERNEL_MORPH_FUNCTION(Ripple, Sphere);
KERNEL_MORPH_FUNCTION(Ripple, Torus);

KERNEL_MORPH_FUNCTION(Sphere, Wave);
KERNEL_MORPH_FUNCTION(Sphere, MultiWave);
KERNEL_MORPH_FUNCTION(Sphere, Ripple);
KERNEL_MORPH_FUNCTION(Sphere, Torus);

KERNEL_MORPH_FUNCTION(Torus, Wave);
KERNEL_MORPH_FUNCTION(Torus, MultiWave);
KERNEL_MORPH_FUNCTION(Torus, Ripple);
KERNEL_MORPH_FUNCTION(Torus, Sphere);


